@page "/customers"
@using eComApp.DB
@using eComApp.DB.Entities
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject NavigationManager NavigationManager

<h3>Customers</h3>

<button @onclick="NavigateToAddCustomer">Add New Customer</button>

<table class="table">
    <thead>
    <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var customer in _customers)
    {
        <tr>
            <td>@customer.FirstName</td>
            <td>@customer.LastName</td>
            <td>@customer.Email</td>
            <td>
                <button @onclick="@(_ => NavigationManager.NavigateTo($"/customer-detail/{customer.Id}"))">View</button>
                <button @onclick="() => DeleteCustomer(customer.Id)">Delete</button>
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    private List<Customer> _customers = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomersAsync();
    }

    private async Task LoadCustomersAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        _customers = await context.Customers.ToListAsync();
    }

    private async Task DeleteCustomer(int customerId)
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var customer = await context.Customers.FindAsync(customerId);
        if (customer != null)
        {
            context.Customers.Remove(customer);
            await context.SaveChangesAsync();
            await LoadCustomersAsync();
        }
    }

    private void NavigateToAddCustomer()
    {
        NavigationManager.NavigateTo("/edit-customer/0");
    }
}